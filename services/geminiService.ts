import { GoogleGenAI, Type } from "@google/genai";
import type { Course, Flashcard, Lesson, TutorMessage, FinalProjectEvaluation, CertificateData, RemedialLesson, QuizQuestion, MindMapNode, InterviewStep, GuidedLessonStep, ClarifyingQuestionWithOptions, Progress, NetworkTopology, ForumPost } from '../types';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const TELNET_CO_CONTEXT = `
TELNET CO es un Proveedor de Servicios de Internet (ISP) con una estructura organizacional y un ecosistema de herramientas muy espec√≠fico. La formaci√≥n DEBE reflejar fielmente este entorno.

**Ecosistema de Herramientas Clave:**
- **Atenci√≥n, Soporte y Gesti√≥n de Clientes (Nivel 1 y Facturaci√≥n):** Splynx (sistema integral de gesti√≥n de ISP). Se utiliza para identificar clientes, gestionar sus servicios, facturaci√≥n y pagos. Sus m√≥dulos de Tareas (Tasks) y Tickets son el sistema oficial para registrar y dar seguimiento a todas las solicitudes de soporte.
- **Gesti√≥n y Operaciones de Red (Todos los Niveles T√©cnicos):** OLT Cloud. Esta es la plataforma central para TODA la gesti√≥n de la red GPON. Sus funciones son:
    - **Dashboard Visual:** Ofrece una vista en tiempo real del estado de la red, incluyendo: Total de ONUs, ONUs Online, Sin Energ√≠a, con P√©rdida de Se√±al (LOSS) e Inactivas.
    - **Monitoreo de Se√±al:** Presenta gr√°ficos de torta (pie charts) que clasifican las ONUs por su nivel de se√±al (Cr√≠tico, Malo, Bueno), permitiendo una identificaci√≥n r√°pida de problemas.
    - **Diagn√≥stico Remoto:** Permite consultar el estado detallado de cualquier ONU, su se√±al, uptime y raz√≥n de la √∫ltima desconexi√≥n.
    - **Inventario de Red Pasiva:** Contiene un inventario detallado de la red, incluyendo la ubicaci√≥n y coordenadas de las Cajas NAP y de los clientes.
    - **Provisi√≥n y Gesti√≥n:** Desde OLT Cloud se autorizan nuevas ONUs y se administran los perfiles de velocidad de los clientes.
- **Base de Conocimiento Interna:** La propia TELNET ACADEMY contiene una secci√≥n de "Base de Conocimiento" con gu√≠as detalladas, procedimientos paso a paso y enlaces a la documentaci√≥n oficial de herramientas como Splynx (https://wiki.splynx.com/). **¬°Debes referir a los colaboradores a buscar art√≠culos espec√≠ficos aqu√≠ para profundizar!** Por ejemplo: "Puedes encontrar una gu√≠a detallada sobre c√≥mo crear un ticket en la Base de Conocimiento, bajo la categor√≠a 'Splynx'".
- **Configuraci√≥n de Equipos:** Winbox (para la configuraci√≥n avanzada de routers MikroTik en la red).
- **Herramientas de Campo (T√©cnicos):** Power Meter (medici√≥n de se√±al √≥ptica RX), herramientas de fibra (cortadora, peladora). OLT Cloud y Splynx son accesibles desde dispositivos m√≥viles para gesti√≥n en campo.
- **Comunicaci√≥n Interna:** Zoho Clip, Correo Electr√≥nico Corporativo.

**Perfiles de Cargo y Responsabilidades Fundamentales:**

1.  **Agente de Atenci√≥n al Cliente / Soporte Nivel 1:**
    *   **Prop√≥sito:** Primer punto de contacto. Resolver problemas sencillos, registrar casos con precisi√≥n y escalar adecuadamente.
    *   **Tareas Clave:** Identificar cliente y sus servicios en Splynx. Crear y documentar un Ticket o Tarea en Splynx con todos los detalles del caso. Realizar diagn√≥stico b√°sico (luces de ONT, reinicio de equipos). Escalar casos al NOC (Nivel 2) a trav√©s de Splynx si el diagn√≥stico b√°sico no resuelve.
    *   **NO HACE:** Acceder a OLT Cloud. Realizar diagn√≥sticos avanzados. No utiliza Winbox.

2.  **Auxiliar NOC ‚Äì ISP y Redes (Soporte Nivel 2):**
    *   **Prop√≥sito:** Principal punto de escalaci√≥n t√©cnica. Diagnosticar y resolver problemas de forma remota.
    *   **Tareas Clave:** Revisar tickets escalados en Splynx. Usar OLT Cloud para un diagn√≥stico completo: verificar estado de ONT (Online/Offline), interpretar niveles de se√±al (Rx Power), revisar dashboards de salud de la red y ocupaci√≥n de PONs. Usar **Winbox** para conectarse a los routers MikroTik de los clientes y de la red para diagnosticar problemas de conectividad, DHCP y NAT. Aprovisionar y configurar ONUs y perfiles de velocidad usando OLT Cloud. Brindar soporte y gu√≠a a los agentes de Nivel 1.
    *   **NO HACE:** Realizar instalaciones f√≠sicas en campo.

3.  **T√©cnico Instalador FTTH y Redes GPON:**
    *   **Prop√≥sito:** Ejecutar instalaciones y mantenimientos en campo. Ser la cara t√©cnica de la empresa.
    *   **Tareas Clave:** Gestionar sus asignaciones a trav√©s de Tareas en Splynx. Realizar instalaciones (tendido, conectorizaci√≥n). Usar Power Meter para garantizar niveles de se√±al √≥ptimos. Coordinar con el NOC para la autorizaci√≥n de la ONT en OLT Cloud. Configurar router Wi-Fi b√°sico. Documentar la orden de servicio en Splynx con fotos y mediciones.

4.  **Ingeniero de Red / Nivel 3:**
    *   **Prop√≥sito:** M√°ximo experto t√©cnico. Dise√±ar, optimizar y resolver los problemas m√°s complejos de la red.
    *   **Tareas Clave:** Dise√±ar la arquitectura de red. Configuraci√≥n avanzada de OLTs (a bajo nivel si es necesario), routers principales (MikroTik) y switches usando **Winbox** y CLI. Gestionar protocolos de enrutamiento (BGP, OSPF). Usar OLT Cloud para an√°lisis de tendencias y problemas a gran escala. Proporcionar soporte experto al NOC.

**Flujo de Trabajo T√≠pico para Problemas de Conexi√≥n:**
1.  Cliente reporta problema.
2.  Agente N1 atiende, identifica en Splynx, crea Ticket/Tarea, realiza diagn√≥stico b√°sico.
3.  Si no se resuelve, el ticket en Splynx se escala al NOC N2.
4.  NOC N2 investiga usando OLT Cloud (dashboard, estado y se√±al de ONT). Verifica el estado administrativo del cliente en Splynx. Si la se√±al es correcta, el NOC N2 se conecta por **Winbox** al router MikroTik del cliente para revisar configuraciones de red (DHCP, NAT, Firewall).
5.  Si es un problema f√≠sico en la fibra (detectado por mala se√±al en OLT Cloud), el NOC N2 asigna una Tarea en Splynx a un T√©cnico Instalador para revisi√≥n en campo.
6.  Si es un problema complejo de la red central, el NOC N2 escala al Ingeniero de Red N3.
`;

// --- UTILITY TO GET COURSE CONTENT ---
const getFullCourseContent = (course: Course): string => `
    Course Title: ${course.title}
    Course Description: ${course.description}
    Modules:
    ${course.modules.map(m => `
        Module: ${m.moduleTitle}
        ${m.lessons.map(l => `Lesson: ${l.lessonTitle}\n${l.initialContent}`).join('\n\n')}
    `).join('\n---\n')}
`;

const lessonSchema = {
  type: Type.OBJECT,
  properties: {
    lessonTitle: {
        type: Type.STRING,
        description: "El t√≠tulo de la lecci√≥n. Debe ser espec√≠fico y orientado a la acci√≥n."
    },
    initialContent: {
      type: Type.STRING,
      description: "El primer fragmento de contenido para esta lecci√≥n. Debe ser conciso, atractivo y terminar de forma natural. Utiliza formato markdown (negritas, listas), emojis relevantes (üì°, üí°, ‚öôÔ∏è), y bloques de c√≥digo con identificadores de lenguaje (ej: ```bash). Para conceptos visuales, envu√©lvelos en etiquetas [searchable] (ej: [searchable]conector SC/APC[/searchable]).",
    },
    initialOptions: {
      type: Type.ARRAY,
      description: "Un array de 2 a 3 opciones de seguimiento para el usuario. Deben ser acciones claras y concisas.",
      items: { type: Type.STRING }
    }
  },
  required: ["lessonTitle", "initialContent", "initialOptions"]
};

const courseSchema = {
    type: Type.OBJECT,
    properties: {
        title: { type: Type.STRING, description: "The main title of the course, focused on the skill or project." },
        description: { type: Type.STRING, description: "A brief, one-paragraph summary of what practical skill the user will acquire." },
        modules: {
            type: Type.ARRAY,
            description: "An array of course modules.",
            items: {
                type: Type.OBJECT,
                properties: {
                    moduleTitle: { type: Type.STRING, description: "The title of this module." },
                    learningObjectives: {
                        type: Type.ARRAY,
                        description: "A list of 2-3 measurable learning objectives for the module.",
                        items: { type: Type.STRING }
                    },
                    lessons: {
                        type: Type.ARRAY,
                        description: "An array of lessons within this module, each structured for Guided Exploration.",
                        items: lessonSchema
                    },
                    quiz: {
                        type: Type.ARRAY,
                        description: "An array of EXACTLY 5 multiple-choice questions for the module's quiz. The array MUST contain 5 items.",
                        items: {
                            type: Type.OBJECT,
                            properties: {
                                question: { type: Type.STRING, description: "The quiz question." },
                                options: {
                                    type: Type.ARRAY,
                                    description: "An array of 4 potential answers.",
                                    items: { type: Type.STRING }
                                },
                                correctAnswer: { type: Type.STRING, description: "The correct answer, which must exactly match one of the options." }
                            },
                            required: ["question", "options", "correctAnswer"]
                        }
                    }
                },
                required: ["moduleTitle", "lessons", "quiz"]
            }
        },
        finalProject: {
            type: Type.OBJECT,
            description: "A final, hands-on project for the student to build, synthesizing all learned skills.",
            properties: {
                title: { type: Type.STRING, description: "The title of the final project." },
                description: { type: Type.STRING, description: "A detailed description of the final project, including requirements, steps, and deliverables." },
                evaluationCriteria: {
                    type: Type.ARRAY,
                    description: "A list of 3-4 clear and measurable evaluation criteria for the project. These should be specific to the task.",
                    items: { type: Type.STRING }
                }
            },
            required: ["title", "description", "evaluationCriteria"]
        }
    },
    required: ["title", "description", "modules", "finalProject"]
};

export interface CourseCreationPayload {
    initialTopic: string;
    context: string;
    depth: 'B√°sico' | 'Intermedio' | 'Avanzado';
    role: string;
    tone: string;
    focus: string;
}

export async function generateClarifyingQuestions(payload: { topic: string, role: string, depth: string, tone: string, focus: string }): Promise<ClarifyingQuestionWithOptions[]> {
    const { topic, role, depth, tone, focus } = payload;
    const prompt = `
    Eres un experto dise√±ador instruccional para TELNET CO. Un administrador est√° creando una Ruta Maestra con las siguientes caracter√≠sticas:
    - **Tema:** "${topic}"
    - **Rol Destinatario:** "${role}"
    - **Profundidad:** "${depth}"
    - **Tono:** "${tone}"
    - **Enfoque:** "${focus}"

    Para refinar el contenido, genera 3 preguntas de opci√≥n m√∫ltiple. Las respuestas del administrador ayudar√°n a definir con precisi√≥n el nivel de conocimiento previo de los colaboradores y los objetivos clave que debe cubrir la ruta. El objetivo es que el administrador elija una opci√≥n, no que escriba texto libre. Devuelve el resultado en formato JSON.
    `;
    
    const questionsSchema = {
        type: Type.OBJECT,
        properties: {
            questions: {
                type: Type.ARRAY,
                description: "Un array de 3 preguntas de clarificaci√≥n, cada una con un texto y un array de opciones.",
                items: {
                    type: Type.OBJECT,
                    properties: {
                        question: { type: Type.STRING, description: "El texto de la pregunta de opci√≥n m√∫ltiple." },
                        options: {
                            type: Type.ARRAY,
                            description: "Un array de 3 a 4 strings que son las opciones de respuesta.",
                            items: { type: Type.STRING }
                        }
                    },
                    required: ["question", "options"]
                }
            }
        },
        required: ["questions"]
    };

    try {
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: prompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: questionsSchema,
            },
        });

        const result = JSON.parse(response.text.trim());
        if (result.questions && Array.isArray(result.questions)) {
            return result.questions;
        }
        throw new Error("La respuesta de la API no contiene un array de preguntas v√°lido.");
    } catch (error) {
        console.error("Error generating clarifying questions:", error);
        throw new Error("No se pudieron generar las preguntas de clarificaci√≥n. Int√©ntalo de nuevo.");
    }
}

export async function generateCourse({ initialTopic, context, depth, role, tone, focus }: CourseCreationPayload): Promise<Course> {
    const prompt = `
    Act√∫a como un dise√±ador instruccional senior y experto en tecnolog√≠a de TELNET ACADEMY. Eres el responsable de crear los planes de desarrollo profesional para los colaboradores de TELNET CO, un ISP.

    **CONTEXTO INTERNO DE LA EMPRESA (TELNET CO) - ¬°MUY IMPORTANTE!**
    ---
    ${TELNET_CO_CONTEXT}
    ---

    **MISI√ìN:**
    Un administrador de TELNET ACADEMY ha solicitado una **Ruta Maestra** sobre "${initialTopic}". Tu misi√≥n es dise√±ar una plantilla de ruta de aprendizaje online que sea **extremadamente relevante, pr√°ctica y adaptada al rol (o roles) para el que est√° dise√±ada** dentro de la empresa.

    **PERFIL DEL P√öBLICO OBJETIVO:**
    - **Rol(es) a los que se dirige:** ${role}
    - **Nivel de Profundidad Solicitado:** ${depth}
    - **Estilo y Tono de Comunicaci√≥n Deseado:** ${tone}
    - **Enfoque Pr√°ctico Principal:** ${focus}
    - **Contexto adicional del Administrador (basado en sus respuestas a preguntas):**
      ---
      ${context}
      ---

    **INSTRUCCIONES CLAVE DE DISE√ëO:**
    1.  **ADAPTACI√ìN AL ROL (CR√çTICO):** El contenido, los ejemplos y la complejidad DEBEN estar directamente alineados con el rol del colaborador.
        *   **Si el rol es 'Todos los cargos'**: El contenido debe ser fundamental y aplicable de manera general a cualquier persona en la empresa. Evita jerga o herramientas extremadamente espec√≠ficas de un solo departamento. Enf√≥cate en habilidades transversales o introducciones a tecnolog√≠as clave de la empresa que todos deber√≠an conocer.
        *   **Si el rol es espec√≠fico (ej. Agente de Soporte Nivel 1, etc.)**: Sigue las gu√≠as de adaptaci√≥n para ese rol.
        *   **Agente de Soporte Nivel 1:** Enf√≥cate en diagn√≥stico b√°sico, uso de Splynx y cu√°ndo escalar.
        *   **Auxiliar NOC (Soporte Nivel 2):** Profundiza en OLT Cloud, Splynx, Winbox y resoluci√≥n de problemas de nivel medio.
        *   **T√©cnico Instalador FTTH:** C√©ntrate en mediciones con Power Meter, OLT Cloud, Splynx y procedimientos en campo.
        *   **Ingeniero de Red (Nivel 3):** Aborda temas de arquitectura de red, protocolos de enrutamiento y gesti√≥n de incidentes mayores.
    2.  **ENFOQUE DEL CONTENIDO:** Adapta el tipo de lecciones al ENFOQUE PR√°ctico principal. Si es "Resoluci√≥n de Problemas", crea lecciones basadas en escenarios y casos de estudio. Si es "Dominio de Herramientas", crea gu√≠as paso a paso detalladas. Si es "Fundamentos Te√≥ricos", enf√≥cate en explicaciones claras de conceptos clave.
    3.  **TONO DE VOZ:** El lenguaje y los ejemplos deben ser consistentemente "${tone}".
    4.  **FORMATO ENRIQUECIDO:**
        *   Utiliza markdown (negritas, listas) y emojis relevantes (üì°, üí°, ‚öôÔ∏è).
        *   Para comandos, scripts o configuraciones, usa bloques de c√≥digo con identificador de lenguaje (ej: \`\`\`mikrotik).
        *   Para conceptos visuales (hardware, dashboards, conectores), envu√©lvelos en etiquetas [searchable]termino a buscar[/searchable].
    5.  **ESTRUCTURA DE LA RUTA:**
    1.  **T√≠tulo y Descripci√≥n:** Claros, profesionales y orientados a la acci√≥n. El t√≠tulo DEBE incluir el nivel de profundidad (ej: "Diagn√≥stico GPON para NOC N2 (Intermedio)").
    2.  **M√≥dulos (3-5):** Cada m√≥dulo debe tener:
        *   **lessons:** En formato "Exploraci√≥n Guiada" con \`lessonTitle\`, \`initialContent\` y \`initialOptions\`.
        *   **quiz:** Un cuestionario con **OBLIGATORIAMENTE 5 PREGUNTAS** de opci√≥n m√∫ltiple.
    3.  **finalProject (OBLIGATORIO):** Un desaf√≠o pr√°ctico que simule una tarea real para el rol del colaborador.
        *   Debe incluir "evaluationCriteria" claros y medibles.
        *   **Importante:** Para roles pr√°cticos como 'T√©cnico Instalador FTTH', el proyecto debe pedir una descripci√≥n Y, si es posible, solicitar expl√≠citamente que el colaborador **adjunte una foto como evidencia** (ej: "describe tu proceso Y adjunta una foto de tu PON Power Meter mostrando una se√±al correcta."). Menciona esto en la descripci√≥n del proyecto.

    El resultado DEBE SER un objeto JSON v√°lido que se adhiera estrictamente al esquema proporcionado. No incluyas texto fuera del JSON.
    `;

    try {
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: prompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: courseSchema,
            },
        });
        
        const jsonText = response.text.trim();
        const parsedCourse: Course = JSON.parse(jsonText);
        
        if (!parsedCourse.title || !parsedCourse.modules || parsedCourse.modules.length === 0) {
            throw new Error("La estructura de la ruta de habilidad generada no es v√°lida.");
        }
        
        return parsedCourse;

    } catch (error) {
        console.error("Error generating course:", error);
        throw new Error("No se pudo generar la ruta de habilidad. Es posible que el modelo haya devuelto una estructura no v√°lida. Por favor, intenta con un tema diferente o vuelve a intentarlo.");
    }
}


const expansionLessonSchema = {
    type: Type.OBJECT,
    properties: {
        lessonTitle: { type: Type.STRING },
        initialContent: { type: Type.STRING, description: "El primer fragmento de contenido para esta lecci√≥n. Debe ser conciso, atractivo y terminar de forma natural. Utiliza formato markdown (negritas, listas) y emojis relevantes (üì°, üí°, ‚öôÔ∏è). Para conceptos visuales, envu√©lvelos en etiquetas [searchable].", },
        initialOptions: { type: Type.ARRAY, items: { type: Type.STRING }, description: "Un array de 2 a 3 opciones de seguimiento para el usuario." }
    },
    required: ["lessonTitle", "initialContent", "initialOptions"]
};

export async function generateExpandedLesson(course: Course, moduleTitle: string, newLessonTitle: string): Promise<Lesson & { lessonTitle: string }> {
    const courseContext = `
        Course Topic: ${course.title}
        Module: "${moduleTitle}"
    `;

    const prompt = `
        Act√∫a como un educador experto en aprendizaje interactivo. Genera el contenido para una nueva lecci√≥n titulada "${newLessonTitle}".
        La lecci√≥n debe encajar l√≥gicamente dentro del contexto del curso y m√≥dulo proporcionados y seguir el formato de "Exploraci√≥n Guiada".
        Crea un 'initialContent' y 2-3 'initialOptions' para iniciar la conversaci√≥n.
        Para conceptos visuales, envu√©lvelos en etiquetas especiales: [searchable]termino a buscar[/searchable]. Para c√≥digo, usa bloques con identificador de lenguaje.

        ---
        **CONTEXTO:**
        ${courseContext}
        ---

        El resultado DEBE SER OBLIGATORIAMENTE un objeto JSON v√°lido que se adhiera al esquema.
    `;
    
    try {
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: prompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: expansionLessonSchema,
            },
        });
        const jsonText = response.text.trim();
        const parsedLesson = JSON.parse(jsonText);
        
        if (!parsedLesson.lessonTitle || !parsedLesson.initialContent) {
            throw new Error("La estructura de la lecci√≥n generada no es v√°lida.");
        }
        return parsedLesson;
    } catch(e) {
        console.error("Error generating expanded lesson:", e);
        throw new Error("No se pudo generar la nueva lecci√≥n.");
    }
}

export async function generateComplementaryLesson(courseTitle: string, moduleTitle: string, existingLessonTitles: string[]): Promise<Lesson> {
    const prompt = `
        Act√∫a como un dise√±ador instruccional experto. Tu tarea es generar UNA lecci√≥n adicional y complementaria para un m√≥dulo de curso existente.

        **CONTEXTO:**
        - Curso: "${courseTitle}"
        - M√≥dulo: "${moduleTitle}"
        - Lecciones existentes en este m√≥dulo:
          ${existingLessonTitles.map(t => `- ${t}`).join('\n')}

        **REQUISITOS:**
        1.  **Genera un T√≠tulo Atractivo:** El t√≠tulo de la nueva lecci√≥n debe ser interesante y relevante.
        2.  **Evita la Redundancia:** La nueva lecci√≥n debe introducir un concepto nuevo, ofrecer una aplicaci√≥n pr√°ctica, o profundizar en un tema existente de una manera que NO se cubra en las lecciones actuales.
        3.  **Sigue el Formato de "Exploraci√≥n Guiada":**
            - **initialContent:** Un p√°rrafo introductorio conciso. Usa markdown, emojis, y etiquetas [searchable] para conceptos visuales.
            - **initialOptions:** 2-3 opciones claras para que el usuario contin√∫e la exploraci√≥n.
        4.  **Adhi√©rete al Esquema:** El resultado DEBE ser un objeto JSON v√°lido.
    `;

    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
        config: {
            responseMimeType: "application/json",
            responseSchema: expansionLessonSchema,
        },
    });
    const parsedLesson = JSON.parse(response.text.trim());
    if (!parsedLesson.lessonTitle || !parsedLesson.initialContent) {
        throw new Error("La estructura de la lecci√≥n generada no es v√°lida.");
    }
    return parsedLesson;
}


const guidedStepSchema = {
    type: Type.OBJECT,
    properties: {
        content: { type: Type.STRING, description: "El siguiente fragmento de contenido, respondiendo a la elecci√≥n del usuario. Usa markdown, emojis, bloques de c√≥digo con identificador y etiquetas [searchable] para t√©rminos visuales." },
        options: { type: Type.ARRAY, items: { type: Type.STRING }, description: "2-3 nuevas opciones de seguimiento." }
    },
    required: ["content", "options"]
};

export async function generateGuidedLessonStep(course: Course, lesson: Lesson, history: GuidedLessonStep[], userChoice: string): Promise<GuidedLessonStep> {
    const prompt = `
    Act√∫a como un instructor experto de TELNET ACADEMY en "${course.title}". Est√°s guiando a un colaborador a trav√©s de una lecci√≥n interactiva.
    
    **HISTORIAL DE LA LECCI√ìN HASTA AHORA:**
    ${history.map((step, i) => `Paso ${i+1}:\nContenido: ${step.content}\nOpciones: ${step.options.join(', ')}`).join('\n\n')}

    **ELECCI√ìN DEL COLABORADOR:**
    "${userChoice}"

    **TU TAREA:**
    Genera el siguiente paso de la lecci√≥n. Tu respuesta debe ser un objeto JSON con:
    1.  **content:** El nuevo fragmento de informaci√≥n que responde directamente a la elecci√≥n del colaborador. S√© claro y conciso. Usa markdown, emojis, bloques de c√≥digo (\`\`\`lang) y etiquetas [searchable] para t√©rminos visuales.
    2.  **options:** 2-3 nuevas opciones para continuar la exploraci√≥n. Una de ellas deber√≠a ser "Continuar con el siguiente tema" o similar si es apropiado.

    El resultado DEBE ser un objeto JSON v√°lido que se adhiera al esquema.
    `;
    
    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
        config: {
            responseMimeType: "application/json",
            responseSchema: guidedStepSchema,
        },
    });
    // FIX: response.text is a property, not a function.
    return JSON.parse(response.text);
}

export async function generateDeeperExplanation(courseTitle: string, lessonTitle: string, lessonContent: string): Promise<string> {
    const prompt = `
    Act√∫a como un Asesor T√©cnico Senior y experto en la materia de TELNET CO. Un colaborador est√° estudiando la lecci√≥n "${lessonTitle}" dentro de la ruta de habilidad "${courseTitle}" y ha solicitado una explicaci√≥n m√°s profunda.

    **CONTEXTO INTERNO DE LA EMPRESA (TELNET CO):**
    ---
    ${TELNET_CO_CONTEXT}
    ---

    **CONTENIDO DE LA LECCI√ìN ACTUAL:**
    ---
    ${lessonContent}
    ---

    **TU MISI√ìN:**
    Analiza el contenido de la lecci√≥n y genera una "Idea Clave" que cumpla UNA de las siguientes funciones:
    1.  **Explicaci√≥n Detallada:** Profundiza en el concepto t√©cnico m√°s importante de la lecci√≥n, explicando el "porqu√©" de las cosas.
    2.  **Ejemplo Pr√°ctico:** Proporciona un ejemplo concreto y pr√°ctico de c√≥mo este concepto se aplica en el d√≠a a d√≠a de TELNET CO, mencionando nuestras herramientas (OLT Cloud, Splynx, Winbox, etc.) y procedimientos.
    3.  **Analog√≠a Clarificadora:** Crea una analog√≠a simple y f√°cil de entender que relacione el concepto t√©cnico con algo de la vida cotidiana.

    **REGLAS:**
    - Tu respuesta debe ser concisa (uno o dos p√°rrafos).
    - Usa formato markdown (negritas, listas) para que sea f√°cil de leer.
    - El tono debe ser el de un colega experto que est√° ayudando a otro a entender mejor.
    - Responde √∫nicamente con la "Idea Clave". No incluyas saludos ni texto introductorio.
    `;

    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
    });
    return response.text.trim();
}

export async function simulateCommandExecution(command: string, context: string): Promise<string> {
    const prompt = `
    Act√∫a como un **experto en la materia y un revisor de c√≥digo senior** de TELNET CO. Un colaborador en una ruta de habilidad sobre "${context}" quiere entender un comando, script o bloque de configuraci√≥n.

    **C√ìDIGO A ANALIZAR:**
    \`\`\`
    ${command}
    \`\`\`

    **TU TAREA:**
    Analiza el c√≥digo y determina la mejor manera de ayudar al colaborador:

    1.  **SI ES UN COMANDO CORTO DE CLI (ej: \`ls -l\`, \`ping 8.8.8.8\`, \`show ip interface brief\`):**
        *   Act√∫a como un emulador de terminal.
        *   Genera una salida de terminal **realista y plausible** que el colaborador ver√≠a al ejecutar ese comando.

    2.  **SI ES UN SCRIPT LARGO O UN BLOQUE DE CONFIGURACI√ìN (ej: un script de Python, un archivo de configuraci√≥n de Nginx, un script de Bash):**
        *   **NO lo ejecutes.**
        *   Proporciona una **explicaci√≥n detallada y exhaustiva** del c√≥digo.
        *   Desglosa el c√≥digo en secciones l√≥gicas.
        *   Para cada secci√≥n, explica:
            *   **Qu√© hace:** Describe la funcionalidad de esa parte del c√≥digo.
            *   **Por qu√© es importante:** Explica su prop√≥sito en el contexto general del script o la configuraci√≥n.
        *   Utiliza formato markdown (listas, negritas) para que la explicaci√≥n sea clara y f√°cil de seguir.

    **REGLA FINAL:**
    Tu respuesta debe ser √∫nicamente la salida simulada O la explicaci√≥n detallada. No incluyas saludos ni texto introductorio.
    `;
    const response = await ai.models.generateContent({ model: "gemini-2.5-flash", contents: prompt });
    return response.text;
}

const flashcardSchema = {
    type: Type.OBJECT,
    properties: {
        flashcards: {
            type: Type.ARRAY,
            description: "An array of 10-15 flashcards, each with a question and an answer covering the most important concepts.",
            items: {
                type: Type.OBJECT,
                properties: {
                    question: { type: Type.STRING, description: "The question for the front of the flashcard. It should be clear and concise." },
                    answer: { type: Type.STRING, description: "The answer for the back of the flashcard. It should be direct and informative." }
                },
                required: ["question", "answer"]
            }
        }
    },
    required: ["flashcards"]
};

export async function generateFlashcardsForCourse(course: Course): Promise<Flashcard[]> {
    const prompt = `
        Act√∫a como un experto en creaci√≥n de material de estudio. Analiza el contenido completo del siguiente curso y genera un conjunto de 10 a 15 flashcards (pregunta y respuesta) que cubran los conceptos m√°s importantes. Las preguntas deben ser claras y las respuestas concisas, utilizando markdown si es necesario.

        El resultado DEBE SER OBLIGATORIAMENTE un objeto JSON v√°lido que se adhiera al esquema proporcionado.

        ---
        **CONTENIDO DEL CURSO:**
        ${getFullCourseContent(course).substring(0, 30000)}
        ---
    `;

    try {
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: prompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: flashcardSchema,
            }
        });
        const result = JSON.parse(response.text);
        if (result.flashcards && Array.isArray(result.flashcards)) {
            return result.flashcards;
        }
        throw new Error("La respuesta de la API no contiene un array de flashcards v√°lido.");
    } catch (e) {
        console.error("Error generating flashcards:", e);
        throw new Error("No se pudieron generar las flashcards. Por favor, int√©ntalo de nuevo.");
    }
}


const expansionSuggestionsSchema = {
    type: Type.OBJECT,
    properties: {
        suggestions: {
            type: Type.ARRAY,
            description: "Un array de 3 a 5 sugerencias de temas de lecciones para expandir el m√≥dulo. Deben ser t√≠tulos de lecciones concisos y atractivos.",
            items: { type: Type.STRING }
        }
    },
    required: ["suggestions"]
};

export async function getModuleExpansionSuggestions(course: Course, moduleIndex: number): Promise<string[]> {
    const module = course.modules[moduleIndex];
    if (!module) {
        throw new Error(`Module with index ${moduleIndex} not found.`);
    }
    
    const prompt = `
        Act√∫a como un dise√±ador instruccional experto, especializado en crear rutas de aprendizaje coherentes y atractivas. Tu tarea es proponer los siguientes pasos l√≥gicos para un colaborador que ha completado las lecciones actuales en un m√≥dulo.

        **CONTEXTO DEL M√ìDULO:**
        - Curso: "${course.title}"
        - M√≥dulo: "${module.moduleTitle}"
        - Lecciones actuales que el colaborador ya conoce:
          ${module.lessons.map(l => `  - ${l.lessonTitle}`).join('\n')}

        **TU MISI√ìN:**
        Basado en el contexto, genera entre 3 y 5 t√≠tulos de lecciones adicionales que cumplan con lo siguiente:
        1.  **Profundizaci√≥n:** Ofrecen una mirada m√°s profunda a un tema ya introducido.
        2.  **Ampliaci√≥n:** Introducen un concepto relacionado pero nuevo que l√≥gicamente sigue a los actuales.
        3.  **Aplicaci√≥n Pr√°ctica:** Sugieren una lecci√≥n enfocada en un caso de uso pr√°ctico o un mini-proyecto.
        4.  **Atractivos y Claros:** Los t√≠tulos deben ser claros, concisos y despertar la curiosidad.
        5.  **Sin Redundancia:** NO deben ser una simple reformulaci√≥n de las lecciones existentes.

        El resultado DEBE SER OBLIGATORIAMENTE un objeto JSON v√°lido con un array de strings llamado "suggestions".
    `;
    
    try {
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: prompt,
            config: {
                responseMimeType: "application/json",
                responseSchema: expansionSuggestionsSchema,
            },
        });
        const result = JSON.parse(response.text);
        if (result.suggestions && Array.isArray(result.suggestions)) {
            return result.suggestions;
        }
        throw new Error("La respuesta de la API no contiene un array de sugerencias v√°lido.");
    } catch (e) {
        console.error("Error generating module expansion suggestions:", e);
        throw new Error("No se pudieron generar sugerencias para expandir el m√≥dulo.");
    }
}

export async function generateModuleDescription(moduleTitle: string, lessonTitles: string[]): Promise<string> {
    const prompt = `
        Act√∫a como un dise√±ador instruccional conciso.
        Dado el siguiente m√≥dulo de un curso, genera una descripci√≥n muy breve (una sola frase) que resuma de qu√© trata.

        **T√≠tulo del M√≥dulo:** "${moduleTitle}"

        **Lecciones en este M√≥dulo:**
        - ${lessonTitles.join('\n- ')}

        **Tu Tarea:**
        Escribe una √∫nica frase descriptiva y atractiva. No incluyas saludos ni texto introductorio. Solo la descripci√≥n.
    `;

    try {
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: prompt,
        });
        return response.text.trim();
    } catch (error) {
        console.error("Error generating module description:", error);
        throw new Error("No se pudo generar la descripci√≥n del m√≥dulo.");
    }
}

export async function streamTutorResponse(
    course: Course,
    progress: Progress,
    history: TutorMessage[],
    newMessage: string,
    moduleIndex: number,
    lessonIndex: number
) {
    const buildProgressSummary = (): string => {
        const totalQuizzes = course.modules.length;
        const passedQuizzesCount = Object.keys(progress.quizScores || {}).filter(key => {
            const score = progress.quizScores![key];
            return (score.score / score.total) >= 0.7;
        }).length;

        let summary = `Resumen del Progreso del Colaborador:\n- Pruebas Aprobadas: ${passedQuizzesCount} de ${totalQuizzes}.\n`;

        if (course.finalProject) {
            if (progress.finalProjectEvaluation) {
                summary += `- Evaluaci√≥n de Competencia Pr√°ctica: Evaluado (${progress.finalProjectEvaluation.overallScore}/100).\n`;
            } else if (progress.completedItems.has('final_project_submitted')) {
                summary += `- Evaluaci√≥n de Competencia Pr√°ctica: Entregado (pendiente de evaluaci√≥n).\n`;
            } else {
                 summary += `- Evaluaci√≥n de Competencia Pr√°ctica: No entregado.\n`;
            }
        }
        
        const examState = progress.finalExamState;
        let examStatusText = 'No iniciado';
        if (examState) {
            switch(examState.status) {
                case 'in_progress': examStatusText = `En progreso (quedan ${examState.attemptsLeft} intentos)`; break;
                case 'passed': examStatusText = 'Aprobado'; break;
                case 'failed_remediation_needed': examStatusText = 'Fallido, necesita estudiar plan de refuerzo'; break;
                case 'not_started': 
                    if (examState.attemptsLeft < 3) {
                         examStatusText = `Listo para reintentar (quedan ${examState.attemptsLeft} intentos)`;
                    } else {
                         examStatusText = 'Listo para iniciar';
                    }
                    break;
            }
        }
        summary += `- Estado del Examen Final: ${examStatusText}.\n`;
        
        return summary;
    };

    const getCurrentLessonContext = (): string => {
        try {
            const module = course.modules[moduleIndex];
            const lesson = module?.lessons[lessonIndex];
            if (module && lesson) {
                return `
**CONTEXTO DE LA LECCI√ìN ACTUAL DEL COLABORADOR:**
El colaborador est√° actualmente enfocado en o ha visto recientemente la siguiente lecci√≥n. Usa este contexto para tus respuestas y preguntas.
- M√≥dulo: "${module.moduleTitle}"
- Lecci√≥n: "${lesson.lessonTitle}"
- Contenido inicial de la lecci√≥n: "${lesson.initialContent.substring(0, 500)}..."
`;
            }
        } catch (e) {
            // Do nothing if indices are out of bounds
        }
        return `**CONTEXTO DE LA LECCI√ìN ACTUAL DEL COLABORADOR:** El colaborador est√° explorando libremente la ruta de habilidad.`;
    };

    const prompt = `
    Eres un Asesor T√©cnico IA de TELNET ACADEMY. Tu personalidad es la de un colega senior, experto y amigable. Tu misi√≥n es ayudar al colaborador a entender y aplicar los conceptos del curso en el contexto real de TELNET CO.

    **CONTEXTO INTERNO DE LA EMPRESA (TELNET CO) - ¬°MUY IMPORTANTE!**
    ---
    ${TELNET_CO_CONTEXT}
    ---

    **CONTEXTO DE LA RUTA DE HABILIDAD ACTUAL:**
    - T√≠tulo: "${course.title}"
    - Descripci√≥n: "${course.description}"
    ---
    ${buildProgressSummary()}
    ---
    ${getCurrentLessonContext()}
    ---

    **HISTORIAL DE CONVERSACI√ìN (√öLTIMOS MENSAJES):**
    ${history.slice(-6).map(m => `${m.role === 'user' ? 'Colaborador' : 'Asesor IA'}: ${m.content}`).join('\n')}
    
    **NUEVA PREGUNTA DEL COLABORADOR:**
    "${newMessage}"

    **INSTRUCCIONES DE RESPUESTA:**
    1.  **Act√∫a como un Experto:** Tu conocimiento es profundo. Responde con confianza y precisi√≥n.
    2.  **S√© Pr√°ctico y Relevante:** Siempre que sea posible, conecta la teor√≠a con las herramientas (Splynx, OLT Cloud) y procedimientos de TELNET CO.
    3.  **Usa B√∫squeda de Google SI ES NECESARIO:** Si la pregunta es sobre un evento muy reciente, un error espec√≠fico de software de terceros, o requiere informaci√≥n actualizada de la web, utiliza la herramienta \`googleSearch\`. **NO la uses para preguntas sobre los conceptos del curso o los procedimientos internos de TELNET CO.**
    4.  **Referencia a la Base de Conocimiento:** Si la pregunta del colaborador puede ser resuelta con un procedimiento est√°ndar, refi√©relo a la "Base de Conocimiento" interna de TELNET ACADEMY. Por ejemplo: "Puedes encontrar una gu√≠a detallada sobre eso en la Base de Conocimiento. Busca el art√≠culo 'Crear un Ticket de Soporte en Splynx'".
    5.  **Formato Claro:** Usa markdown (negritas, listas, etc.) para que tus respuestas sean f√°ciles de leer.
    6.  **Mant√©n el Tono:** Amigable, de apoyo, como un mentor.
    `;

    return ai.models.generateContentStream({
        model: "gemini-2.5-flash",
        contents: prompt,
        config: {
            tools: [{ googleSearch: {} }],
        },
    });
}

export async function generateForumSummary(lessonTitle: string, posts: ForumPost[]): Promise<string> {
    const discussionContent = posts.map(post => `
        ---
        POST TITLE: ${post.title}
        AUTHOR: ${post.authorName}
        CONTENT: ${post.content}
        REPLIES:
        ${post.replies.map(reply => `
            - Reply by ${reply.authorName}: ${reply.content}
        `).join('\n')}
    `).join('\n');

    const prompt = `
    Act√∫a como un Asistente Acad√©mico de IA. Tu tarea es analizar una discusi√≥n de un foro sobre una lecci√≥n espec√≠fica y generar un resumen ejecutivo.

    **Lecci√≥n:** "${lessonTitle}"

    **Contenido de la Discusi√≥n:**
    ${discussionContent.substring(0, 30000)}

    **Instrucciones para el Resumen:**
    1.  **Identifica los Temas Principales:** ¬øCu√°les son las 2-3 preguntas o temas clave que se discuten?
    2.  **Resume las Soluciones Clave:** Si se propusieron soluciones o respuestas importantes, res√∫melas.
    3.  **Se√±ala Dudas Persistentes:** Menciona si alguna pregunta qued√≥ sin una respuesta clara o si surgieron nuevas dudas.
    4.  **Formato:** Utiliza markdown (listas, negritas) para que el resumen sea claro y f√°cil de leer. Responde √∫nicamente con el resumen.
    `;

    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
    });
    return response.text.trim();
}


// FIX: Added missing functions
export async function generateCertificateData(course: Course, userName: string): Promise<CertificateData> {
    const prompt = `
    Act√∫a como un director acad√©mico. Genera los datos para un certificado de finalizaci√≥n.
    - Curso: "${course.title}"
    - Participante: "${userName}"

    Debes generar:
    1.  **summary**: Un resumen muy breve (15-20 palabras) de la competencia principal adquirida.
    2.  **validationId**: Un ID de validaci√≥n alfanum√©rico √∫nico de 12 caracteres.
    3.  **durationHours**: Una estimaci√≥n razonable de las horas que tomar√≠a completar este curso (entre 4 y 20 horas).

    El resultado DEBE ser un objeto JSON v√°lido.
    `;
    const schema = {
        type: Type.OBJECT,
        properties: {
            summary: { type: Type.STRING },
            validationId: { type: Type.STRING },
            durationHours: { type: Type.NUMBER }
        },
        required: ["summary", "validationId", "durationHours"]
    };

    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
        config: {
            responseMimeType: "application/json",
            responseSchema: schema
        }
    });
    // FIX: response.text is a property, not a function.
    return JSON.parse(response.text);
}

export async function generateRemedialLesson(incorrectQuestions: { question: QuizQuestion; userAnswer: string }[]): Promise<RemedialLesson> {
    const prompt = `
    Act√∫a como un tutor experto. Un estudiante ha respondido incorrectamente a las siguientes preguntas.
    Analiza los errores y genera una lecci√≥n de refuerzo concisa y clara que aborde espec√≠ficamente los conceptos mal entendidos.

    Preguntas y Respuestas Incorrectas:
    ${incorrectQuestions.map(q => `
    - Pregunta: "${q.question.question}"
    - Respuesta Correcta: "${q.question.correctAnswer}"
    - Respuesta del Estudiante: "${q.userAnswer}"
    `).join('\n')}

    Genera un objeto JSON con "title" y "content" para la lecci√≥n de refuerzo. El contenido debe usar markdown.
    `;
    const schema = {
        type: Type.OBJECT,
        properties: {
            title: { type: Type.STRING, description: "Un t√≠tulo claro y conciso para la lecci√≥n de refuerzo." },
            content: { type: Type.STRING, description: "El contenido de la lecci√≥n en formato markdown, explicando los conceptos clave." }
        },
        required: ["title", "content"]
    };
     const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
        config: {
            responseMimeType: "application/json",
            responseSchema: schema
        }
    });
    // FIX: response.text is a property, not a function.
    return JSON.parse(response.text);
}

export async function generateCompetencyFeedback(moduleTitle: string, score: number, total: number): Promise<string> {
    const prompt = `
    Act√∫a como un coach de desarrollo profesional. Un colaborador complet√≥ el cuestionario del m√≥dulo "${moduleTitle}" y obtuvo ${score} de ${total} respuestas correctas.
    
    Genera un feedback breve (2-3 frases) que sea constructivo y motivador. Si la puntuaci√≥n es baja, enf√≥cate en las √°reas de mejora. Si es alta, felic√≠talo y an√≠malo a continuar.
    Responde √∫nicamente con el feedback en formato markdown. No incluyas saludos.
    `;
    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
    });
    return response.text.trim();
}

export function streamExamAttempt(course: Course, history: TutorMessage[]) {
    const prompt = `
    Eres un Examinador T√©cnico Senior de IA para TELNET ACADEMY. Tu misi√≥n es conducir un examen oral riguroso para validar la competencia de un colaborador en la ruta de habilidad: "${course.title}".

    **CONTEXTO INTERNO DE TELNET CO:**
    ${TELNET_CO_CONTEXT}

    **REGLAS DEL EXAMEN:**
    1.  **Formato Conversacional:** El examen es un di√°logo. Haz una pregunta, espera la respuesta, eval√∫ala y haz la siguiente.
    2.  **Profundidad T√©cnica:** Las preguntas deben ser desafiantes y requerir la aplicaci√≥n de conocimientos en escenarios pr√°cticos de TELNET CO. No hagas preguntas de memoria simples.
    3.  **Ciclo de Preguntas:** Realiza entre 4 y 6 preguntas en total para evaluar la competencia.
    4.  **Feedback Constructivo:** Si una respuesta es incorrecta o incompleta, haz una contrapregunta para darle al colaborador la oportunidad de corregir o profundizar. No des la respuesta directamente.
    5.  **VEREDICTO FINAL (MUY IMPORTANTE):** Despu√©s de la √∫ltima pregunta, debes emitir un veredicto. Tu respuesta DEBE terminar con un bloque de c√≥digo JSON con la siguiente estructura:
        \`\`\`json
        {
          "passed": boolean,
          "feedback": "string con tu feedback general sobre el desempe√±o del colaborador."
        }
        \`\`\`
        El texto del feedback debe estar fuera del JSON, y el JSON debe ser la √∫ltima parte de tu respuesta.

    **HISTORIAL DEL EXAMEN HASTA AHORA:**
    ${history.map(m => `${m.role === 'user' ? 'Colaborador' : 'Examinador'}: ${m.content}`).join('\n\n')}

    **TU SIGUIENTE ACCI√ìN:**
    - Si la conversaci√≥n acaba de empezar, saluda y haz la primera pregunta.
    - Si el colaborador acaba de responder, eval√∫a su respuesta y haz la siguiente pregunta o contrapregunta.
    - Si ya has hecho suficientes preguntas, da tu feedback final y el bloque JSON con el veredicto.
    `;
    return ai.models.generateContentStream({
        model: "gemini-2.5-flash",
        contents: prompt,
    });
}

export async function generateExamRemediationPlan(courseTitle: string, history: TutorMessage[]): Promise<string> {
     const prompt = `
    Act√∫a como un tutor acad√©mico de IA. Un colaborador no ha logrado superar el examen final para la ruta de habilidad "${courseTitle}". Analiza el historial completo del examen y crea un "Plan de Estudio de Refuerzo" personalizado y pr√°ctico.

    **HISTORIAL DEL EXAMEN:**
    ${history.map(m => `${m.role === 'user' ? 'Colaborador' : 'Examinador'}: ${m.content}`).join('\n\n')}

    **INSTRUCCIONES:**
    1.  Identifica los 2-3 conceptos clave donde el colaborador mostr√≥ m√°s debilidad.
    2.  Para cada concepto, crea una secci√≥n en el plan de estudio.
    3.  En cada secci√≥n, proporciona:
        *   Una explicaci√≥n clara y concisa del concepto.
        *   Un ejemplo pr√°ctico relacionado con TELNET CO.
        *   Una sugerencia de acci√≥n o ejercicio simple para reforzar el aprendizaje.
    4.  Usa formato markdown para que el plan sea claro y f√°cil de seguir.
    `;
    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
    });
    return response.text.trim();
}

export async function generateMindMap(course: Course): Promise<MindMapNode> {
    const prompt = `
    Act√∫a como un experto en visualizaci√≥n de informaci√≥n. Analiza la estructura y contenido del siguiente curso y genera un mapa mental jer√°rquico.
    El resultado debe ser un objeto JSON que represente el nodo ra√≠z del mapa mental. Cada nodo debe tener una propiedad "concept" (string) y opcionalmente una propiedad "children" (un array de nodos).

    **CONTENIDO DEL CURSO:**
    ${getFullCourseContent(course).substring(0, 30000)}
    `;
    const schema = {
        type: Type.OBJECT,
        properties: {
            concept: { type: Type.STRING },
            children: {
                type: Type.ARRAY,
                items: {
                    type: Type.OBJECT,
                    properties: {
                        concept: { type: Type.STRING },
                        children: {
                            type: Type.ARRAY,
                             items: {
                                type: Type.OBJECT,
                                properties: {
                                    concept: { type: Type.STRING },
                                }
                            }
                        }
                    }
                }
            }
        },
        required: ["concept"]
    };
    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: prompt,
        config: { responseMimeType: "application/json", responseSchema: schema }
    });
    return JSON.parse(response.text);
}

export async function streamInterviewSimResponse(course: Course, history: InterviewStep[]) {
    const prompt = `
    Eres un Entrevistador T√©cnico Senior de IA de TELNET CO. Est√°s simulando una entrevista t√©cnica para un rol relacionado con la ruta de habilidad "${course.title}".

    **REGLAS DE LA SIMULACI√ìN:**
    1.  **Inicia la Entrevista:** Si el historial est√° vac√≠o, pres√©ntate, explica brevemente el escenario pr√°ctico que van a discutir y haz la primera pregunta.
    2.  **S√© Realista:** Act√∫a como un entrevistador real. Haz preguntas de seguimiento, pide aclaraciones y profundiza en las respuestas del candidato.
    3.  **Enf√≥cate en Escenarios:** Basa tus preguntas en escenarios pr√°cticos relevantes para TELNET CO y el contenido del curso.
    4.  **No des las Respuestas:** Gu√≠a al candidato si se equivoca, pero no le des la soluci√≥n.
    5.  **Concluye la Entrevista:** Despu√©s de 4-5 intercambios, concluye la simulaci√≥n agradeci√©ndole al candidato por su tiempo.

    **HISTORIAL DE LA ENTREVISTA:**
    ${history.map(m => `${m.role === 'user' ? 'Candidato' : 'Entrevistador'}: ${m.content}`).join('\n\n')}

    **TU SIGUIENTE ACCI√ìN:**
    Contin√∫a la conversaci√≥n de manera l√≥gica.
    `;
    return ai.models.generateContentStream({
        model: "gemini-2.5-flash",
        contents: prompt,
    });
}

export async function generateNetworkTopology(prompt: string): Promise<NetworkTopology> {
    const schema = {
        type: Type.OBJECT,
        properties: {
            devices: {
                type: Type.ARRAY,
                items: {
                    type: Type.OBJECT,
                    properties: {
                        id: { type: Type.STRING },
                        label: { type: Type.STRING },
                        type: { type: Type.STRING },
                        explanation: { type: Type.STRING }
                    },
                    required: ["id", "label", "type", "explanation"]
                }
            },
            links: {
                type: Type.ARRAY,
                items: {
                    type: Type.OBJECT,
                    properties: {
                        source: { type: Type.STRING },
                        target: { type: Type.STRING },
                        label: { type: Type.STRING },
                        explanation: { type: Type.STRING }
                    },
                    required: ["source", "target", "explanation"]
                }
            }
        },
        required: ["devices", "links"]
    };

    const generationPrompt = `
    Act√∫a como un Ingeniero de Red experto. Analiza la siguiente descripci√≥n de una topolog√≠a de red y convi√©rtela en un objeto JSON estructurado.

    **Descripci√≥n de la Red:**
    "${prompt}"

    **Instrucciones:**
    1.  Identifica todos los dispositivos de red mencionados.
    2.  As√≠gnales un ID √∫nico, una etiqueta clara y el tipo correcto (router, switch, pc, server, firewall, cloud, etc.).
    3.  Para cada dispositivo, escribe una breve explicaci√≥n de su funci√≥n en esta red espec√≠fica.
    4.  Identifica todas las conexiones entre los dispositivos.
    5.  Crea los enlaces ("links") usando los IDs de los dispositivos.
    6.  Para cada enlace, escribe una breve explicaci√≥n de su prop√≥sito (ej: "Conexi√≥n a Internet", "Acceso a VLAN de Ventas").

    El resultado DEBE ser un objeto JSON v√°lido que se adhiera al esquema.
    `;
    
    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash",
        contents: generationPrompt,
        config: {
            responseMimeType: "application/json",
            responseSchema: schema,
        }
    });

    return JSON.parse(response.text);
}